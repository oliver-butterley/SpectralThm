/-
Copyright (c) 2025 Yoh Tanimoto. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yoh Tanimoto
-/
-- import Mathlib.MeasureTheory.VectorMeasure.Basic
import Mathlib
import SpectralThm.ComplexMeasure.SimpleFunc

-- /-!
-- # Bochner integral

-- The Bochner integral extends the definition of the Lebesgue integral to functions that map from a
-- measure space into a Banach space (complete normed vector space). It is constructed here
-- for L1 functions by extending the integral on simple functions. See the file
-- `Mathlib/MeasureTheory/Integral/Bochner/Basic.lean` for the integral of functions
-- and corresponding API.

-- ## Main definitions

-- The Bochner integral is defined through the extension process described in the file
-- `Mathlib/MeasureTheory/Integral/SetToL1.lean`, which follows these steps:

-- 1. Define the integral of the indicator of a set. This is `weightedSMul Œº s x = Œº.real s * x`.
--   `weightedSMul Œº` is shown to be linear in the value `x` and `DominatedFinMeasAdditive`
--   (defined in the file `Mathlib/MeasureTheory/Integral/SetToL1.lean`) with respect to the set `s`.

-- 2. Define the integral on simple functions of the type `SimpleFunc Œ± E` (notation : `Œ± ‚Üí‚Çõ E`)
--   where `E` is a real normed space. (See `SimpleFunc.integral` for details.)

-- 3. Transfer this definition to define the integral on `L1.simpleFunc Œ± E` (notation :
--   `Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E`), see `L1.simpleFunc.integral`. Show that this integral is a continuous linear
--   map from `Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E` to `E`.

-- 4. Define the Bochner integral on L1 functions by extending the integral on integrable simple
--   functions `Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E` using `ContinuousLinearMap.extend` and the fact that the embedding of
--   `Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E` into `Œ± ‚Üí‚ÇÅ[Œº] E` is dense.

-- ## Notations

-- * `Œ± ‚Üí‚Çõ E` : simple functions (defined in `Mathlib/MeasureTheory/Function/SimpleFunc.lean`)
-- * `Œ± ‚Üí‚ÇÅ[Œº] E` : functions in L1 space, i.e., equivalence classes of integrable functions (defined in
--                 `Mathlib/MeasureTheory/Function/LpSpace/Basic.lean`)
-- * `Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E` : simple functions in L1 space, i.e., equivalence classes of integrable simple
--                  functions (defined in `Mathlib/MeasureTheory/Function/SimpleFuncDense`)

-- We also define notations for integral on a set, which are described in the file
-- `Mathlib/MeasureTheory/Integral/SetIntegral.lean`.

-- Note : `‚Çõ` is typed using `\_s`. Sometimes it shows as a box if the font is missing.

-- ## Tags

-- Bochner integral, simple function, function space, Lebesgue dominated convergence theorem

-- -/


noncomputable section

open Filter ENNReal Set MeasureTheory VectorMeasure ContinuousLinearMap
open scoped NNReal ENNReal MeasureTheory

variable {Œ± M R S : Type*}

namespace MeasureTheory

section weightedVectorSMul

variable [MeasurableSpace Œ±] [AddCommMonoid M] [TopologicalSpace M] [Semiring R]
  [TopologicalSpace R] [m : Module R M] [ContinuousSMul R M]
  (Œº : VectorMeasure Œ± M)

/-- Given a set `s`, return the continuous linear map `fun x => (Œº s) x`. The extension
of that set function through `setToL1` gives the Bochner integral of L1 functions. -/
def weightedVectorSMul (s : Set Œ±) : R ‚ÜíL[R] M where
  toFun c := c ‚Ä¢ (Œº s)
  map_add' _ _ := m.add_smul _ _ (Œº s)
  map_smul' _ _ := smul_assoc _ _ (Œº s)

@[simp]
theorem weightedVectorSMul_apply (s : Set Œ±) (c : R) : weightedVectorSMul Œº s c = c ‚Ä¢ (Œº s) := rfl

@[simp]
theorem weightedVectorSMul_zero_measure :
    weightedVectorSMul (0 : VectorMeasure Œ± M) = (0 : Set Œ± ‚Üí R ‚ÜíL[R] M) := by ext; simp

@[simp]
theorem weightedVectorSMul_empty :
    weightedVectorSMul Œº ‚àÖ = (0 : R ‚ÜíL[R] M) := by ext; simp

theorem weightedVectorSMul_smul_vectorMeasure (a b : R) {s : Set Œ±} :
    (weightedVectorSMul (a ‚Ä¢ Œº) s) b = b ‚Ä¢ (weightedVectorSMul Œº s a) := by simp

theorem weightedVectorSMul_congr (s t : Set Œ±) (hst : Œº s = Œº t) :
    (weightedVectorSMul Œº s : R ‚ÜíL[R] M) = weightedVectorSMul Œº t := by
  ext
  simp only [weightedVectorSMul_apply, one_smul]
  exact hst

theorem weightedVectorSMul_null {s : Set Œ±} (h_zero : Œº s = 0) :
    (weightedVectorSMul Œº s : R ‚ÜíL[R] M) = 0 := by
  ext
  simp only [weightedVectorSMul_apply, one_smul, ContinuousLinearMap.zero_apply]
  exact h_zero

theorem weightedVectorSMul_nonneg [PartialOrder M] [PartialOrder R] [OrderedSMul R M]
    {s : Set Œ±} {c : R} (hs : 0 ‚â§ Œº s) (hc : 0 ‚â§ c) : 0 ‚â§ weightedVectorSMul Œº s c := by
  simp only [weightedVectorSMul_apply]
  exact smul_nonneg hc hs

theorem weightedVectorSMul_smul (c : R) (s : Set Œ±) (x : R) :
    weightedVectorSMul Œº s (c ‚Ä¢ x) = c ‚Ä¢ weightedVectorSMul Œº s x := by
  simp only [weightedVectorSMul_apply]
  exact smul_assoc c x (Œº s)

theorem weightedVectorSMul_smul' {ùïú : Type*} [SMul ùïú M] [SMul ùïú R] [IsScalarTower ùïú R M]
    (c : ùïú) (s : Set Œ±) (x : R) :
    weightedVectorSMul Œº s (c ‚Ä¢ x) = c ‚Ä¢ weightedVectorSMul Œº s x := by
  simp only [weightedVectorSMul_apply]
  exact smul_assoc c x (Œº s)

variable [ContinuousAdd M]

theorem weightedVectorSMul_add_vectorMeasure (ŒΩ : VectorMeasure Œ± M) {s : Set Œ±} :
    (weightedVectorSMul (Œº + ŒΩ) s : R ‚ÜíL[R] M) = weightedVectorSMul Œº s + weightedVectorSMul ŒΩ s := by ext; simp

variable [T2Space M]

theorem weightedVectorSMul_union (s t : Set Œ±) (hs : MeasurableSet s) (ht : MeasurableSet t)
    (hdisj : Disjoint s t) :
    (weightedVectorSMul Œº (s ‚à™ t) : R ‚ÜíL[R] M) = weightedVectorSMul Œº s + weightedVectorSMul Œº t := by
  ext
  simp only [weightedVectorSMul_apply, one_smul, ContinuousLinearMap.add_apply]
  exact of_union hdisj hs ht

end weightedVectorSMul

section NormedWeightedVectorSMul

variable [MeasurableSpace Œ±] [SeminormedAddCommGroup M] [NontriviallyNormedField R]
  [NormedSpace R M] (Œº : VectorMeasure Œ± M)

-- theorem dominatedFinMeasAdditive_weightedSMul {_ : MeasurableSpace Œ±} :
--     DominatedFinMeasAdditive Œº (weightedSMul Œº : Set Œ± ‚Üí R ‚ÜíL[R] M) 1 :=
--   ‚ü®weightedSMul_union, fun s _ _ => (norm_weightedSMul_le s).trans (one_mul _).symm.le‚ü©

theorem norm_weightedVectorSMul_le (s : Set Œ±) :
    ‚Äñ(weightedVectorSMul Œº s : R ‚ÜíL[R] M)‚Äñ ‚â§ ‚ÄñŒº s‚Äñ := by
  rw [ContinuousLinearMap.opNorm_le_iff (norm_nonneg (Œº s))]
  intro c
  simp only [weightedVectorSMul_apply, mul_comm]
  exact norm_smul_le _ _

end NormedWeightedVectorSMul


local infixr:25 " ‚Üí‚Çõ " => SimpleFunc

namespace SimpleFunc

section Integral

-- /-!
-- ### The Bochner integral of simple functions

-- Define the Bochner integral of simple functions of the type `Œ± ‚Üí‚Çõ Œ≤` where `Œ≤` is a normed group,
-- and prove basic property of this integral.
-- -/

open Finset
variable [m : MeasurableSpace Œ±] [NormedAddCommGroup M] [NontriviallyNormedField R]
  [NormedSpace R M] (Œº : VectorMeasure Œ± M)

/-- Vector integral of simple functions whose codomain is an `R`-valued `NormedSpace`.
This is equal to `‚àë x ‚àà f.range, x ‚Ä¢ Œº (f ‚Åª¬π' {x})` (see `integral_eq`). -/
def vectorIntegral (f : Œ± ‚Üí‚Çõ R) : M := f.setToVectorSimpleFunc (weightedVectorSMul Œº)

@[simp]
theorem vectorIntegral_def (f : Œ± ‚Üí‚Çõ R) :
    f.vectorIntegral Œº = f.setToVectorSimpleFunc (weightedVectorSMul Œº) := rfl

theorem vectorIntegral_eq (f : Œ± ‚Üí‚Çõ R) : f.vectorIntegral Œº = ‚àë x ‚àà f.range, x ‚Ä¢ Œº (f ‚Åª¬π' {x}) := by
  simp only [vectorIntegral_def]
  rfl

theorem vectorIntegral_eq_sum_filter [DecidablePred fun x : R => x ‚â† 0] (f : Œ± ‚Üí‚Çõ R) :
    f.vectorIntegral Œº = ‚àë x ‚àà {x ‚àà f.range | x ‚â† 0}, x ‚Ä¢ Œº (f ‚Åª¬π' {x}) := by
  simp [vectorIntegral_def, ne_eq, setToVectorSimpleFunc_eq_sum_filter, weightedVectorSMul_apply]

/-- The Bochner integral is equal to a sum over any set that includes `f.range` (except `0`). -/
theorem vectorIntegral_eq_sum_of_subset [DecidablePred fun x : R => x ‚â† 0] {f : Œ± ‚Üí‚Çõ R}
    {s : Finset R} (hs : {x ‚àà f.range | x ‚â† 0} ‚äÜ s) :
    f.vectorIntegral Œº = ‚àë x ‚àà s, x ‚Ä¢ Œº (f ‚Åª¬π' {x}) := by
  rw [SimpleFunc.vectorIntegral_eq_sum_filter, Finset.sum_subset hs]
  rintro x - hx; rw [Finset.mem_filter, not_and_or, Ne, Classical.not_not] at hx
  rcases hx.symm with (rfl | hx)
  ¬∑ simp
  rw [SimpleFunc.mem_range] at hx
  rw [preimage_eq_empty] <;> simp [Set.disjoint_singleton_left, hx]

@[simp]
theorem vectorIntegral_const (y : R) :
    (const Œ± y).vectorIntegral Œº = y ‚Ä¢ Œº univ := by
  classical
  calc
    (const Œ± y).vectorIntegral Œº = ‚àë z ‚àà {y}, z ‚Ä¢ Œº (const Œ± y ‚Åª¬π' {z}) := by
      apply vectorIntegral_eq_sum_of_subset
      exact subset_trans (filter_subset _ _) (range_const_subset _ _)
    _ = y ‚Ä¢ Œº univ := by simp [Set.preimage]

@[simp]
theorem vectorIntegral_piecewise_zero (f : Œ± ‚Üí‚Çõ R) {s : Set Œ±} (hs : MeasurableSet s) :
    (piecewise s hs f 0).vectorIntegral Œº = f.vectorIntegral (Œº.restrict s) := by
  classical
  rw [@vectorIntegral_eq_sum_of_subset _ _ _ _ _ _ _ _ _ (piecewise s hs f 0)
    {x ‚àà f.range | x ‚â† 0} _, vectorIntegral_eq_sum_filter]
  ¬∑ apply Finset.sum_congr rfl _
    intro x hx
    simp only [ne_eq, mem_filter, mem_range, Set.mem_range] at hx
    congr 1
    simp only [coe_piecewise, coe_zero, piecewise_eq_indicator]
    rw [VectorMeasure.restrict_apply Œº hs (measurableSet_fiber f x)]
    congr
    ext z
    simp only [Set.mem_preimage, mem_singleton_iff, mem_inter_iff]
    refine ‚ü®?_, ?_‚ü©
    ¬∑ intro h
      have hz : z ‚àà s ‚à© (Function.support f) := by
        apply Set.indicator_apply_ne_zero.mp
        rw [h]
        exact hx.2
      rw [Set.indicator_of_mem (Set.mem_of_mem_inter_left hz)] at h
      exact ‚ü®h, Set.mem_of_mem_inter_left hz‚ü©
    ¬∑ intro h
      rw [Set.indicator_of_mem h.2]
      exact h.1
  ¬∑ intro x hx
    simp only [mem_filter, mem_range, coe_piecewise, coe_zero, piecewise_eq_indicator,
      Set.mem_range] at hx
    obtain ‚ü®y, hy‚ü© := hx.1
    simp only [ne_eq, mem_filter, mem_range, Set.mem_range]
    refine ‚ü®?_, hx.2‚ü©
    use y
    rw [Set.indicator_of_mem] at hy
    ¬∑ exact hy
    have h : y ‚àà s ‚à© (Function.support f) := by
      apply Set.indicator_apply_ne_zero.mp
      rw [hy]
      exact hx.2
    exact Set.mem_of_mem_inter_left h

/-- Calculate the integral of `g ‚àò f : Œ± ‚Üí‚Çõ S`, where `f` is an integrable function from `Œ±` to `E`
    and `g` is a function from `E` to `F`. We require `g 0 = 0` so that `g ‚àò f` is integrable. -/
theorem map_vectorIntegral [NormedAddCommGroup S] (f : Œ± ‚Üí‚Çõ S) (g : S ‚Üí R) (hg : g 0 = 0) :
    (f.map g).vectorIntegral Œº = ‚àë x ‚àà f.range, g x ‚Ä¢ (Œº (f ‚Åª¬π' {x})) :=
  map_setToVectorSimpleFunc _ (weightedVectorSMul_union Œº) hg

-- /-- `SimpleFunc.integral` and `SimpleFunc.lintegral` agree when the integrand has type
--     `Œ± ‚Üí‚Çõ ‚Ñù‚â•0‚àû`. But since `‚Ñù‚â•0‚àû` is not a `NormedSpace`, we need some form of coercion.
--     See `integral_eq_lintegral` for a simpler version. -/
-- theorem integral_eq_lintegral' {f : Œ± ‚Üí‚Çõ E} {g : E ‚Üí ‚Ñù‚â•0‚àû} (hf : Integrable f Œº) (hg0 : g 0 = 0)
--     (ht : ‚àÄ b, g b ‚â† ‚àû) :
--     (f.map (ENNReal.toReal ‚àò g)).integral Œº = ENNReal.toReal (‚à´‚Åª a, g (f a) ‚àÇŒº) := by
--   have hf' : f.FinMeasSupp Œº := integrable_iff_finMeasSupp.1 hf
--   simp only [‚Üê map_apply g f, lintegral_eq_lintegral]
--   rw [map_integral f _ hf, map_lintegral, ENNReal.toReal_sum]
--   ¬∑ refine Finset.sum_congr rfl fun b _ => ?_
--     rw [smul_eq_mul, toReal_mul, mul_comm, Function.comp_apply, measureReal_def]
--   ¬∑ rintro a -
--     by_cases a0 : a = 0
--     ¬∑ rw [a0, hg0, zero_mul]; exact WithTop.zero_ne_top
--     ¬∑ apply mul_ne_top (ht a) (hf'.meas_preimage_singleton_ne_zero a0).ne
--   ¬∑ simp [hg0]

-- variable [NormedSpace ‚Ñù E]


theorem vectorIntegral_congr {f g : Œ± ‚Üí‚Çõ R} (h : f =·µê[Œº.variation.ennrealToMeasure] g) :
    f.vectorIntegral Œº = g.vectorIntegral Œº := setToVectorSimpleFunc_congr (weightedVectorSMul Œº)
      (fun s _ hsŒº => (weightedVectorSMul_null Œº (measure_eq_zero_of_variation_eq_zero Œº s hsŒº)))
      (weightedVectorSMul_union Œº) h

-- /-- `SimpleFunc.bintegral` and `SimpleFunc.integral` agree when the integrand has type
--     `Œ± ‚Üí‚Çõ ‚Ñù‚â•0‚àû`. But since `‚Ñù‚â•0‚àû` is not a `NormedSpace`, we need some form of coercion. -/
-- theorem integral_eq_lintegral {f : Œ± ‚Üí‚Çõ ‚Ñù} (hf : Integrable f Œº) (h_pos : 0 ‚â§·µê[Œº] f) :
--     f.integral Œº = ENNReal.toReal (‚à´‚Åª a, ENNReal.ofReal (f a) ‚àÇŒº) := by
--   have : f =·µê[Œº] f.map (ENNReal.toReal ‚àò ENNReal.ofReal) :=
--     h_pos.mono fun a h => (ENNReal.toReal_ofReal h).symm
--   rw [‚Üê integral_eq_lintegral' hf]
--   exacts [integral_congr hf this, ENNReal.ofReal_zero, fun b => ENNReal.ofReal_ne_top]

theorem vectorIntegral_add {f g : Œ± ‚Üí‚Çõ R} :
    vectorIntegral Œº (f + g) = vectorIntegral Œº f + vectorIntegral Œº g :=
  setToVectorSimpleFunc_add _ (weightedVectorSMul_union Œº)

theorem vectorIntegral_neg {f : Œ± ‚Üí‚Çõ R} : vectorIntegral Œº (-f) = -vectorIntegral Œº f :=
  setToVectorSimpleFunc_neg _ (weightedVectorSMul_union Œº)

theorem vectorIntegral_sub {f g : Œ± ‚Üí‚Çõ R} :
    vectorIntegral Œº (f - g) = vectorIntegral Œº f - vectorIntegral Œº g :=
  setToVectorSimpleFunc_sub _ (weightedVectorSMul_union Œº)

theorem vectorIntegral_smul (c : R) {f : Œ± ‚Üí‚Çõ R} :
    vectorIntegral Œº (c ‚Ä¢ f) = c ‚Ä¢ vectorIntegral Œº f :=
  setToVectorSimpleFunc_smul _ (weightedVectorSMul_union Œº) c

theorem vectorIntegral_smul' {ùïú : Type*} [SMulZeroClass ùïú R] [DistribSMul ùïú M] [IsScalarTower ùïú R M]
    (c : ùïú) {f : Œ± ‚Üí‚Çõ R} : vectorIntegral Œº (c ‚Ä¢ f) = c ‚Ä¢ vectorIntegral Œº f := by
  apply setToVectorSimpleFunc_smul' _ (weightedVectorSMul_union Œº) (weightedVectorSMul_smul' Œº) c

-- theorem norm_setToVectorSimpleFunc_le_integral_norm (T : Set Œ± ‚Üí E ‚ÜíL[‚Ñù] F) {C : ‚Ñù}
--     (hT_norm : ‚àÄ s, MeasurableSet s ‚Üí Œº s < ‚àû ‚Üí ‚ÄñT s‚Äñ ‚â§ C * Œº.real s) {f : Œ± ‚Üí‚Çõ E}
--     (hf : Integrable f Œº) : ‚Äñf.setToSimpleFunc T‚Äñ ‚â§ C * (f.map norm).integral Œº :=
--   calc
--     ‚Äñf.setToSimpleFunc T‚Äñ ‚â§ C * ‚àë x ‚àà f.range, Œº.real (f ‚Åª¬π' {x}) * ‚Äñx‚Äñ :=
--       norm_setToVectorSimpleFunc_le_sum_mul_norm_of_integrable T hT_norm f hf
--     _ = C * (f.map norm).integral Œº := by
--       rw [map_integral f norm hf norm_zero]; simp_rw [smul_eq_mul]

-- theorem norm_integral_le_integral_norm (f : Œ± ‚Üí‚Çõ E) (hf : Integrable f Œº) :
--     ‚Äñf.integral Œº‚Äñ ‚â§ (f.map norm).integral Œº := by
--   refine (norm_setToVectorSimpleFunc_le_integral_norm _ (fun s _ _ => ?_) hf).trans (one_mul _).le
--   exact (norm_weightedVectorSMul_le s).trans (one_mul _).symm.le

-- theorem integral_add_measure {ŒΩ} (f : Œ± ‚Üí‚Çõ E) (hf : Integrable f (Œº + ŒΩ)) :
--     f.integral (Œº + ŒΩ) = f.integral Œº + f.integral ŒΩ := by
--   simp_rw [integral_def]
--   refine setToVectorSimpleFunc_add_left'
--     (weightedSMul Œº) (weightedSMul ŒΩ) (weightedSMul (Œº + ŒΩ)) (fun s _ hŒºŒΩs => ?_) hf
--   rw [lt_top_iff_ne_top, Measure.coe_add, Pi.add_apply, ENNReal.add_ne_top] at hŒºŒΩs
--   rw [weightedVectorSMul_add_measure _ _ hŒºŒΩs.1 hŒºŒΩs.2]

-- section Order

-- variable [PartialOrder F] [IsOrderedAddMonoid F] [OrderedSMul ‚Ñù F]

-- lemma integral_nonneg {f : Œ± ‚Üí‚Çõ F} (hf : 0 ‚â§·µê[Œº] f) :
--     0 ‚â§ f.integral Œº := by
--   rw [integral_eq]
--   apply Finset.sum_nonneg
--   rw [forall_mem_range]
--   intro y
--   by_cases hy : 0 ‚â§ f y
--   ¬∑ positivity
--   ¬∑ suffices Œº (f ‚Åª¬π' {f y}) = 0 by simp [this, measureReal_def]
--     rw [‚Üê nonpos_iff_eq_zero]
--     refine le_of_le_of_eq (measure_mono fun x hx ‚Ü¶ ?_) (ae_iff.mp hf)
--     simp only [Set.mem_preimage, mem_singleton_iff, mem_setOf_eq] at hx ‚ä¢
--     exact hx ‚ñ∏ hy

-- lemma integral_mono {f g : Œ± ‚Üí‚Çõ F} (h : f ‚â§·µê[Œº] g) (hf : Integrable f Œº) (hg : Integrable g Œº) :
--     f.integral Œº ‚â§ g.integral Œº := by
--   rw [‚Üê sub_nonneg, ‚Üê integral_sub hg hf]
--   rw [‚Üê sub_nonneg_ae] at h
--   exact integral_nonneg h

-- lemma integral_mono_measure {ŒΩ} {f : Œ± ‚Üí‚Çõ F} (hf : 0 ‚â§·µê[ŒΩ] f) (hŒºŒΩ : Œº ‚â§ ŒΩ) (hfŒΩ : Integrable f ŒΩ) :
--     f.integral Œº ‚â§ f.integral ŒΩ := by
--   simp only [integral_eq]
--   apply Finset.sum_le_sum
--   simp only [forall_mem_range]
--   intro x
--   by_cases hx : 0 ‚â§ f x
--   ¬∑ obtain (hx | hx) := hx.eq_or_lt
--     ¬∑ simp [‚Üê hx]
--     simp only [measureReal_def]
--     gcongr
--     ¬∑ exact integrable_iff.mp hfŒΩ (f x) hx.ne' |>.ne
--     ¬∑ exact hŒºŒΩ _
--   ¬∑ suffices ŒΩ (f ‚Åª¬π' {f x}) = 0 by
--       have A : Œº (f ‚Åª¬π' {f x}) = 0 := by simpa using (hŒºŒΩ _ |>.trans_eq this)
--       simp [measureReal_def, A, this]
--     rw [‚Üê nonpos_iff_eq_zero, ‚Üê ae_iff.mp hf]
--     refine measure_mono fun y hy ‚Ü¶ ?_
--     simp_all

-- end Order

-- end Integral

-- end SimpleFunc

-- namespace L1

-- open AEEqFun Lp.simpleFunc Lp

-- variable [NormedAddCommGroup E] {m : MeasurableSpace Œ±} {Œº : Measure Œ±}

-- namespace SimpleFunc

-- theorem norm_eq_integral (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) : ‚Äñf‚Äñ = ((toSimpleFunc f).map norm).integral Œº := by
--   rw [norm_eq_sum_mul f, (toSimpleFunc f).map_integral norm (SimpleFunc.integrable f) norm_zero]
--   simp_rw [smul_eq_mul]

-- section PosPart

-- /-- Positive part of a simple function in L1 space. -/
-- nonrec def posPart (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù :=
--   ‚ü®Lp.posPart (f : Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù), by
--     rcases f with ‚ü®f, s, hsf‚ü©
--     use s.posPart
--     simp only [SimpleFunc.posPart, SimpleFunc.coe_map, Function.comp_def, coe_posPart, ‚Üê hsf,
--       posPart_mk] ‚ü©

-- /-- Negative part of a simple function in L1 space. -/
-- def negPart (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù :=
--   posPart (-f)

-- @[norm_cast]
-- theorem coe_posPart (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) : (posPart f : Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) = Lp.posPart (f : Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) := rfl

-- @[norm_cast]
-- theorem coe_negPart (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) : (negPart f : Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) = Lp.negPart (f : Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) := rfl

-- end PosPart

-- section SimpleFuncIntegral

-- /-!
-- ### The Bochner integral of `L1`

-- Define the Bochner integral on `Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E` by extension from the simple functions `Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E`,
-- and prove basic properties of this integral. -/

-- variable [NormedRing ùïú] [Module ùïú E] [IsBoundedSMul ùïú E] [NormedSpace ‚Ñù E] [SMulCommClass ‚Ñù ùïú E]

-- attribute [local instance] simpleFunc.isBoundedSMul simpleFunc.module simpleFunc.normedSpace

-- /-- The Bochner integral over simple functions in L1 space. -/
-- def integral (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) : E :=
--   (toSimpleFunc f).integral Œº

-- theorem integral_eq_integral (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) : integral f = (toSimpleFunc f).integral Œº := rfl

-- nonrec theorem integral_eq_lintegral {f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù} (h_pos : 0 ‚â§·µê[Œº] toSimpleFunc f) :
--     integral f = ENNReal.toReal (‚à´‚Åª a, ENNReal.ofReal ((toSimpleFunc f) a) ‚àÇŒº) := by
--   rw [integral, SimpleFunc.integral_eq_lintegral (SimpleFunc.integrable f) h_pos]

-- theorem integral_eq_setToL1S (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) : integral f = setToL1S (weightedSMul Œº) f := rfl

-- nonrec theorem integral_congr {f g : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E} (h : toSimpleFunc f =·µê[Œº] toSimpleFunc g) :
--     integral f = integral g :=
--   SimpleFunc.integral_congr (SimpleFunc.integrable f) h

-- theorem integral_add (f g : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) : integral (f + g) = integral f + integral g :=
--   setToL1S_add _ (fun _ _ => weightedSMul_null) weightedSMul_union _ _

-- theorem integral_smul (c : ùïú) (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) : integral (c ‚Ä¢ f) = c ‚Ä¢ integral f :=
--   setToL1S_smul _ (fun _ _ => weightedSMul_null) weightedSMul_union weightedSMul_smul c f

-- theorem norm_integral_le_norm (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) : ‚Äñintegral f‚Äñ ‚â§ ‚Äñf‚Äñ := by
--   rw [integral, norm_eq_integral]
--   exact (toSimpleFunc f).norm_integral_le_integral_norm (SimpleFunc.integrable f)

-- variable (Œ± E Œº ùïú)

-- /-- The Bochner integral over simple functions in L1 space as a continuous linear map. -/
-- def integralCLM' : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) ‚ÜíL[ùïú] E :=
--   LinearMap.mkContinuous ‚ü®‚ü®integral, integral_add‚ü©, integral_smul‚ü© 1 fun f =>
--     le_trans (norm_integral_le_norm _) <| by rw [one_mul]

-- /-- The Bochner integral over simple functions in L1 space as a continuous linear map over ‚Ñù. -/
-- def integralCLM : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) ‚ÜíL[‚Ñù] E :=
--   integralCLM' Œ± E ‚Ñù Œº

-- variable {Œ± E Œº ùïú}

-- local notation "Integral" => integralCLM Œ± E Œº

-- open ContinuousLinearMap

-- theorem norm_Integral_le_one : ‚ÄñIntegral‚Äñ ‚â§ 1 :=
--   LinearMap.mkContinuous_norm_le _ zero_le_one fun f ‚Ü¶ by
--     simpa [one_mul] using norm_integral_le_norm f

-- section PosPart

-- theorem posPart_toSimpleFunc (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) :
--     toSimpleFunc (posPart f) =·µê[Œº] (toSimpleFunc f).posPart := by
--   have eq : ‚àÄ a, (toSimpleFunc f).posPart a = max ((toSimpleFunc f) a) 0 := fun a => rfl
--   have ae_eq : ‚àÄ·µê a ‚àÇŒº, toSimpleFunc (posPart f) a = max ((toSimpleFunc f) a) 0 := by
--     filter_upwards [toSimpleFunc_eq_toFun (posPart f), Lp.coeFn_posPart (f : Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù),
--       toSimpleFunc_eq_toFun f] with _ _ h‚ÇÇ h‚ÇÉ
--     convert h‚ÇÇ using 1
--     rw [h‚ÇÉ]
--   refine ae_eq.mono fun a h => ?_
--   rw [h, eq]

-- theorem negPart_toSimpleFunc (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) :
--     toSimpleFunc (negPart f) =·µê[Œº] (toSimpleFunc f).negPart := by
--   rw [SimpleFunc.negPart, MeasureTheory.SimpleFunc.negPart]
--   filter_upwards [posPart_toSimpleFunc (-f), neg_toSimpleFunc f]
--   intro a h‚ÇÅ h‚ÇÇ
--   rw [h‚ÇÅ]
--   change max _ _ = max _ _
--   rw [h‚ÇÇ]
--   simp

-- theorem integral_eq_norm_posPart_sub (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) : integral f = ‚ÄñposPart f‚Äñ - ‚ÄñnegPart f‚Äñ := by
--   -- Convert things in `L¬π` to their `SimpleFunc` counterpart
--   have ae_eq‚ÇÅ : (toSimpleFunc f).posPart =·µê[Œº] (toSimpleFunc (posPart f)).map norm := by
--     filter_upwards [posPart_toSimpleFunc f] with _ h
--     rw [SimpleFunc.map_apply, h]
--     conv_lhs => rw [‚Üê SimpleFunc.posPart_map_norm, SimpleFunc.map_apply]
--   -- Convert things in `L¬π` to their `SimpleFunc` counterpart
--   have ae_eq‚ÇÇ : (toSimpleFunc f).negPart =·µê[Œº] (toSimpleFunc (negPart f)).map norm := by
--     filter_upwards [negPart_toSimpleFunc f] with _ h
--     rw [SimpleFunc.map_apply, h]
--     conv_lhs => rw [‚Üê SimpleFunc.negPart_map_norm, SimpleFunc.map_apply]
--   rw [integral, norm_eq_integral, norm_eq_integral, ‚Üê SimpleFunc.integral_sub]
--   ¬∑ change (toSimpleFunc f).integral Œº =
--       ((toSimpleFunc (posPart f)).map norm - (toSimpleFunc (negPart f)).map norm).integral Œº
--     apply MeasureTheory.SimpleFunc.integral_congr (SimpleFunc.integrable f)
--     filter_upwards [ae_eq‚ÇÅ, ae_eq‚ÇÇ] with _ h‚ÇÅ h‚ÇÇ
--     rw [SimpleFunc.sub_apply, ‚Üê h‚ÇÅ, ‚Üê h‚ÇÇ]
--     exact DFunLike.congr_fun (toSimpleFunc f).posPart_sub_negPart.symm _
--   ¬∑ exact (SimpleFunc.integrable f).pos_part.congr ae_eq‚ÇÅ
--   ¬∑ exact (SimpleFunc.integrable f).neg_part.congr ae_eq‚ÇÇ

-- end PosPart

-- end SimpleFuncIntegral

-- end SimpleFunc

-- open SimpleFunc

-- local notation "Integral" => @integralCLM Œ± E _ _ _ _ _ Œº _

-- variable [NormedSpace ‚Ñù E] [NormedRing ùïú] [Module ùïú E] [IsBoundedSMul ùïú E] [SMulCommClass ‚Ñù ùïú E]
--   [CompleteSpace E]

-- section IntegrationInL1

-- attribute [local instance] simpleFunc.isBoundedSMul simpleFunc.module

-- open ContinuousLinearMap

-- variable (ùïú) in
-- /-- The Bochner integral in L1 space as a continuous linear map. -/
-- nonrec def integralCLM' : (Œ± ‚Üí‚ÇÅ[Œº] E) ‚ÜíL[ùïú] E :=
--   (integralCLM' Œ± E ùïú Œº).extend (coeToLp Œ± E ùïú) (simpleFunc.denseRange one_ne_top)
--     simpleFunc.isUniformInducing

-- /-- The Bochner integral in L1 space as a continuous linear map over ‚Ñù. -/
-- def integralCLM : (Œ± ‚Üí‚ÇÅ[Œº] E) ‚ÜíL[‚Ñù] E :=
--   integralCLM' ‚Ñù

-- /-- The Bochner integral in L1 space -/
-- irreducible_def integral : (Œ± ‚Üí‚ÇÅ[Œº] E) ‚Üí E :=
--   integralCLM

-- theorem integral_eq (f : Œ± ‚Üí‚ÇÅ[Œº] E) : integral f = integralCLM f := by
--   simp only [integral]

-- theorem integral_eq_setToL1 (f : Œ± ‚Üí‚ÇÅ[Œº] E) :
--     integral f = setToL1 (dominatedFinMeasAdditive_weightedSMul Œº) f := by
--   simp only [integral]; rfl

-- @[norm_cast]
-- theorem SimpleFunc.integral_L1_eq_integral (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) :
--     L1.integral (f : Œ± ‚Üí‚ÇÅ[Œº] E) = SimpleFunc.integral f := by
--   simp only [integral, L1.integral]
--   exact setToL1_eq_setToL1SCLM (dominatedFinMeasAdditive_weightedSMul Œº) f

-- variable (Œ± E)

-- @[simp]
-- theorem integral_zero : integral (0 : Œ± ‚Üí‚ÇÅ[Œº] E) = 0 := by
--   simp only [integral]
--   exact map_zero integralCLM

-- variable {Œ± E}

-- @[integral_simps]
-- theorem integral_add (f g : Œ± ‚Üí‚ÇÅ[Œº] E) : integral (f + g) = integral f + integral g := by
--   simp only [integral]
--   exact map_add integralCLM f g

-- @[integral_simps]
-- theorem integral_neg (f : Œ± ‚Üí‚ÇÅ[Œº] E) : integral (-f) = -integral f := by
--   simp only [integral]
--   exact map_neg integralCLM f

-- @[integral_simps]
-- theorem integral_sub (f g : Œ± ‚Üí‚ÇÅ[Œº] E) : integral (f - g) = integral f - integral g := by
--   simp only [integral]
--   exact map_sub integralCLM f g

-- @[integral_simps]
-- theorem integral_smul (c : ùïú) (f : Œ± ‚Üí‚ÇÅ[Œº] E) : integral (c ‚Ä¢ f) = c ‚Ä¢ integral f := by
--   simp only [integral]
--   change (integralCLM' ùïú) (c ‚Ä¢ f) = c ‚Ä¢ (integralCLM' ùïú) f
--   exact map_smul (integralCLM' ùïú) c f

-- theorem norm_Integral_le_one : ‚ÄñintegralCLM (Œ± := Œ±) (E := E) (Œº := Œº)‚Äñ ‚â§ 1 :=
--   norm_setToL1_le (dominatedFinMeasAdditive_weightedSMul Œº) zero_le_one

-- theorem nnnorm_Integral_le_one : ‚ÄñintegralCLM (Œ± := Œ±) (E := E) (Œº := Œº)‚Äñ‚Çä ‚â§ 1 :=
--   norm_Integral_le_one

-- theorem norm_integral_le (f : Œ± ‚Üí‚ÇÅ[Œº] E) : ‚Äñintegral f‚Äñ ‚â§ ‚Äñf‚Äñ :=
--   calc
--     ‚Äñintegral f‚Äñ = ‚ÄñintegralCLM f‚Äñ := by simp only [integral]
--     _ ‚â§ ‚ÄñintegralCLM (Œ± := Œ±) (Œº := Œº)‚Äñ * ‚Äñf‚Äñ := le_opNorm _ _
--     _ ‚â§ 1 * ‚Äñf‚Äñ := mul_le_mul_of_nonneg_right norm_Integral_le_one <| norm_nonneg _
--     _ = ‚Äñf‚Äñ := one_mul _

-- theorem nnnorm_integral_le (f : Œ± ‚Üí‚ÇÅ[Œº] E) : ‚Äñintegral f‚Äñ‚Çä ‚â§ ‚Äñf‚Äñ‚Çä :=
--   norm_integral_le f

-- @[continuity]
-- theorem continuous_integral : Continuous fun f : Œ± ‚Üí‚ÇÅ[Œº] E => integral f := by
--   simp only [integral]
--   exact L1.integralCLM.continuous

-- section PosPart

-- theorem integral_eq_norm_posPart_sub (f : Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) :
--     integral f = ‚ÄñLp.posPart f‚Äñ - ‚ÄñLp.negPart f‚Äñ := by
--   -- Use `isClosed_property` and `isClosed_eq`
--   refine @isClosed_property _ _ _ ((‚Üë) : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚Üí Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù)
--       (fun f : Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù => integral f = ‚ÄñLp.posPart f‚Äñ - ‚ÄñLp.negPart f‚Äñ)
--       (simpleFunc.denseRange one_ne_top) (isClosed_eq ?_ ?_) ?_ f
--   ¬∑ simp only [integral]
--     exact cont _
--   ¬∑ refine Continuous.sub (continuous_norm.comp Lp.continuous_posPart)
--       (continuous_norm.comp Lp.continuous_negPart)
--   -- Show that the property holds for all simple functions in the `L¬π` space.
--   ¬∑ intro s
--     norm_cast
--     exact SimpleFunc.integral_eq_norm_posPart_sub _

-- end PosPart

-- end IntegrationInL1

-- end L1

-- end MeasureTheory
